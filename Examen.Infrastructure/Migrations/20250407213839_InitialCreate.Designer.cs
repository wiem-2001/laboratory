// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(ExamenContext))]
    [Migration("20250407213839_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Analyse", b =>
                {
                    b.Property<int>("analyseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("analyseId"));

                    b.Property<int>("BilanCodeInfirmier")
                        .HasColumnType("int");

                    b.Property<int>("BilanCodePatient")
                        .HasColumnType("int");

                    b.Property<DateTime>("BilanDatePrelevement")
                        .HasColumnType("datetime2");

                    b.Property<int>("CodeInfirmier")
                        .HasColumnType("int");

                    b.Property<int>("CodePatient")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePrelevement")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeAnalyse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("dureeResultat")
                        .HasColumnType("int");

                    b.Property<double>("prixAnalyse")
                        .HasColumnType("float");

                    b.Property<float>("valeurAnalysee")
                        .HasColumnType("real");

                    b.Property<float>("valeurMaxNormale")
                        .HasColumnType("real");

                    b.Property<float>("valeurMinNormale")
                        .HasColumnType("real");

                    b.HasKey("analyseId");

                    b.HasIndex("BilanCodeInfirmier", "BilanCodePatient", "BilanDatePrelevement");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Bilan", b =>
                {
                    b.Property<int>("CodeInfirmier")
                        .HasColumnType("int");

                    b.Property<int>("CodePatient")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePrelevement")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailMedecin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Paye")
                        .HasColumnType("bit");

                    b.HasKey("CodeInfirmier", "CodePatient", "DatePrelevement");

                    b.HasIndex("CodePatient");

                    b.ToTable("Bilans");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Infirmier", b =>
                {
                    b.Property<int>("InfirmierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfirmierId"));

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Specilite")
                        .HasColumnType("int");

                    b.HasKey("InfirmierId");

                    b.ToTable("Infirmiers");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Laboratoire", b =>
                {
                    b.Property<int>("laboratoireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("laboratoireId"));

                    b.Property<string>("intitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("localisation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AdresseLabo");

                    b.HasKey("laboratoireId");

                    b.ToTable("Laboratoires");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Patient", b =>
                {
                    b.Property<int>("codePatient")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("codePatient"));

                    b.Property<string>("EmailPatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Informations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("codePatient");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Analyse", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Bilan", "Bilan")
                        .WithMany("Analyses")
                        .HasForeignKey("BilanCodeInfirmier", "BilanCodePatient", "BilanDatePrelevement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bilan");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Bilan", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Infirmier", "Infirmier")
                        .WithMany("Bilans")
                        .HasForeignKey("CodeInfirmier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Patient", "Patient")
                        .WithMany("Bilans")
                        .HasForeignKey("CodePatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Infirmier");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Bilan", b =>
                {
                    b.Navigation("Analyses");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Infirmier", b =>
                {
                    b.Navigation("Bilans");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Patient", b =>
                {
                    b.Navigation("Bilans");
                });
#pragma warning restore 612, 618
        }
    }
}
